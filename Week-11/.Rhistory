cumulative_end(new_cumulative_end)
interval_start(cumulative_start())
interval_end(cumulative_end())
updatePlot(selected_name(), interval_start(), interval_end())
})
observeEvent(input$prevButton, {
new_cumulative_end <- cumulative_end() - 50
# Check if the new cumulative end goes below the initial interval end
if (new_cumulative_end < 1932) {
new_cumulative_end <- 1932
}
cumulative_end(new_cumulative_end)
interval_start(cumulative_start())
interval_end(cumulative_end())
updatePlot(selected_name(), interval_start(), interval_end())
})
output$textOutput <- renderText({
if (!is.null(selected_name())) {
if (selected_name() == "Finley") {
A
} else if (selected_name() == "Blake") {
B
} else if (selected_name() == "Tatum") {
C
} else if (selected_name() == "Charlie") {
D
} else if (selected_name() == "Armani") {
E
}
}
})
observeEvent(input$Name, {
selected_name(input$Name)
})
observeEvent(input$nextButton, {
if (!is.null(selected_name())) {
if (selected_name() == "Finley") {
A
} else if (selected_name() == "Blake") {
B
} else if (selected_name() == "Tatum") {
C
} else if (selected_name() == "Charlie") {
D
} else if (selected_name() == "Armani") {
E
}
}
})
observeEvent(input$prevButton, {
if (!is.null(selected_name())) {
if (selected_name() == "Finley") {
A
} else if (selected_name() == "Blake") {
B
} else if (selected_name() == "Tatum") {
C
} else if (selected_name() == "Charlie") {
D
} else if (selected_name() == "Armani") {
E
}
}
})
# Create a plot to visualize the trend using facet_wrap with free y-scales
output$distPlot3 <- renderPlot({
ggplot(combined_name_trend_df) +
aes(x = Year, y = Proportion, group = Gender, color = Gender) +
geom_line() +
labs(x = "Year", y = "Proportion of Name", title="Trend of Gender-Neutral Names") +
facet_wrap(~Name, scales = "free_y") +
scale_x_continuous(breaks = seq(1882, 2022, by = 25))
})
# Show the first "n" observations ----
output$view <- renderTable({
head(popular_gn, input$obs)
})
output$characterTable <- renderTable({
character_trend
})
output$distPlot4 <- renderPlot({  # Fixed output ID
# Get the selected number of years from the slider input
num_years <- input$bars2
# Filter the data to include only the selected number of years
filtered_data <- unique_df %>%
filter(year >= (2022 - num_years + 1))
# Create the bar plot
ggplot(filtered_data) +
aes(x = year, y = number_of_names, fill=coincide) +
geom_bar(stat = "identity") +
labs(
x = "Year",
y = "Number of Unique Names",
title = "Number of Unique Names over the Years"
) +
scale_x_continuous(
limits = c(2022 - num_years + 1, 2022),
breaks = seq(2022 - num_years + 1, 2022, by = 10)
)
})
output$table <- renderDT({
datatable(popular_gn_only)
})
observeEvent(input$highlightButton, {
# Highlight names ending with 'n'
popular_gn_only$Name <- ifelse(substr(popular_gn_only$Name, nchar(popular_gn_only$Name), nchar(popular_gn_only$Name)) == "n",
paste0("<span style='background-color: yellow;'>", popular_gn_only$Name, "</span>"),
popular_gn_only$Name)
output$table <- renderDT({
datatable(popular_gn_only, escape = FALSE)
})
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
runApp()
g2 <- ggplot(filtered_df) +
aes(x = Year, y = Proportion, group = Gender, color = Gender) +
geom_line(linetype = "solid") +
labs(x = "Year", y = "Proportion of Name", title = "Trend of Gender-Neutral Names") +
scale_x_continuous(breaks = seq(1882, 2022, by = 25), limits = c(1882, 2022), expand = c(0, 0)) +
scale_y_continuous(limits = y_limits)
g2 <- ggplot(filtered_df) +
aes(x = Year, y = Proportion, group = Gender, color = Gender) +
geom_line(linetype = "solid") +
labs(x = "Year", y = "Proportion of Name", title = "Trend of Gender-Neutral Names") +
scale_x_continuous(breaks = seq(1882, 2022, by = 25), limits = c(1882, 2022), expand = c(0, 0))
g2
runApp()
combined_name_trend_df
coincide_m <- combined_name_trend_df %>%
filter(Name %in% male_names$Name) %>% select(Proportion)
coincide_m
combined_name_trend_df %>% mutate(combined_m=combined_m)
coincide_m <- combined_name_trend_df %>%
filter(Name %in% male_names$Name) %>%
select(Proportion)
# To create a new column based on a condition, use mutate
combined_name_trend_df <- combined_name_trend_df %>%
mutate(combined_m = ifelse(Name %in% male_names$Name, "Male", "Not Male"))
combined_name_trend_df
ggplot(combined_name_trend_df) +
aes(x = year, y = proportion) +
geom_bar(stat = "identity",fill=combined_m) +
labs(
x = "Year",
y = "Proportion of Gender-Neutral Names",
title = "Proportion of Gender-Neutral Names Over the Selected Years"
) +
scale_x_continuous(
limits = c(2022 - num_years + 1, 2022),
breaks = seq(2022 - num_years + 1, 2022, by = 10))
coincide_m <- combined_name_trend_df %>%
filter(Name %in% male_names$Name) %>%
select(Proportion)
# To create a new column based on a condition, use mutate
combined_name_trend_df <- combined_name_trend_df %>%
mutate(combined_m = ifelse(Name %in% male_names$Name, "Male", "Not Male"))
# Assuming 'combined_m' is present in 'combined_name_trend_df' with categorical values
ggplot(combined_name_trend_df) +
aes(x = year, y = proportion, fill = combined_m) +
geom_bar(stat = "identity") +
labs(
x = "Year",
y = "Proportion of Gender-Neutral Names",
title = "Proportion of Gender-Neutral Names Over the Selected Years"
) +
scale_x_continuous(
limits = c(2022 - num_years + 1, 2022),
breaks = seq(2022 - num_years + 1, 2022, by = 10)
)
# Assuming 'combined_m' is present in 'combined_name_trend_df' with categorical values
ggplot(combined_name_trend_df) +
aes(x = year, y = proportion, fill = combined_m) +
geom_bar(stat = "identity") +
labs(
x = "Year",
y = "Proportion of Gender-Neutral Names",
title = "Proportion of Gender-Neutral Names Over the Selected Years"
)
rlang::last_trace()
# Assuming combined_m is not a factor or categorical variable
combined_name_trend_df$combined_m <- as.factor(combined_name_trend_df$combined_m)
ggplot(combined_name_trend_df) +
aes(x = year, y = proportion, fill = combined_m) +
geom_bar(stat = "identity") +
labs(
x = "Year",
y = "Proportion of Gender-Neutral Names",
title = "Proportion of Gender-Neutral Names Over the Selected Years"
)
combined_name_trend_df
class(combined_name_trend_df$combined_m)
combined_name_trend_df$combined_m
combined_name_trend_df <- combined_name_trend_df %>%
mutate(combined_m = ifelse(Name %in% male_names$Name, "Male", "Not Male"))
combined_name_trend_df
proportion_df
http://api.covidactnow.org/v2/states.timeseries.json?apiKey=8bcdc0d3540f4ef2a5dba2794128335f
https://api.covidactnow.org/v2/states.timeseries.json?apiKey=8bcdc0d3540f4ef2a5dba2794128335f
https:/api.covidactnow.org/v2/states.timeseries.json?apiKey=8bcdc0d3540f4ef2a5dba2794128335f
install.packages("jsonlite')
)
install.packages('jsonlite')
install.packages("jsonlite")
install.packages("jsonlite")
library(httr)
library(jsonlite)
library(tidyverse)
historic_state_data_url <- "https://api.covidactnow.org/v2/states.timeseries.json?apiKey=8bcdc0d3540f4ef2a5dba2794128335f"
raw_data <- GET(historic_state_data_url)
library(httr)
library(jsonlite)
library(tidyverse)
library(httr)
library(jsonlite)
library(tidyverse)
data <- fromJSON(rawToChar(raw_data$content))
glimpse(data)
glimpse(data)
data %>% group_by(state)%>% select(population)
# Creating a new dataframe with needed data
# Save date
time_series_transmission <- tibble(Date=time_series$cdcTransmissionLevelTimeseries[[which(data$state=="C
A")]]$date)
time_series <- data %>%
unnest(actualsTimeseries)
# Creating a new dataframe with needed data
# Save date
time_series_transmission <- tibble(Date=time_series$cdcTransmissionLevelTimeseries[[which(data$state=="C
A")]]$date)
# Creating a new dataframe with needed data
# Save date
time_series_transmission <- tibble(Date=time_series$cdcTransmissionLevelTimeseries[[which(data$state=="C
A")]]$date)
# Creating a new dataframe with needed data
# Save date
time_series_transmission <- tibble(Date=time_series$cdcTransmissionLevelTimeseries[[which(data$state=="C
A")]]$date)
# Creating a new dataframe with needed data
# Save date
time_series_transmission <- tibble(Date=time_series$cdcTransmissionLevelTimeseries[[which(data$state=="CA")]]$date)
# Transmission levels in each state
time_series_transmission$Alaska <- time_series$cdcTransmissionLevelTimeseries[[which(data$state=="AK")]]$
cdcTransmissionLevel
time_series_transmission$California <- time_series$cdcTransmissionLevelTimeseries[[which(data$state=="C
A")]]$cdcTransmissionLevel
# Creating a new dataframe with needed data
# Save date
time_series_transmission <- tibble(Date=time_series$cdcTransmissionLevelTimeseries[[which(data$state=="CA")]]$date)
# Transmission levels in each state
time_series_transmission$Alaska <- time_series$cdcTransmissionLevelTimeseries[[which(data$state=="AK")]]$
cdcTransmissionLevel
time_series_transmission$California <- time_series$cdcTransmissionLevelTimeseries[[which(data$state=="CA")]]$cdcTransmissionLevel
time_series_transmission$New_Jersey <- time_series$cdcTransmissionLevelTimeseries[[which(data$state=="NJ")]]$cdcTransmissionLevel
time_series_transmission$Tennessee <- time_series$cdcTransmissionLevelTimeseries[[which(data$state=="TN")]]$cdcTransmissionLevel
time_series_transmission$District_of_Columbia <- time_series$cdcTransmissionLevelTimeseries[[which(data$state=="DC")]]$cdcTransmissionLevel
print(head(time_series_transmission))
# New data-frame with dates
time_series_cases <- list(Alaska = time_series %>% filter(state=="AK") %>% select(date,cases))
# Cases of each state
time_series_cases$California <- time_series %>% filter(state=="CA") %>% select(date,cases)
time_series_cases$New_Jersey <- time_series %>% filter(state=="NJ") %>% select(date,cases)
time_series_cases$Tennessee <- time_series %>% filter(state=="TN") %>% select(date,cases)
time_series_cases$District_of_Columbia <- time_series %>% filter(state=="DC") %>% select(date,cases)
# New data-frame with dates
time_series_cases <- list(Alaska = time_series %>% filter(state=="AK") %>% select(date,cases))
# Cases of each state
time_series_cases$California <- time_series %>% filter(state=="CA") %>% select(date,cases)
time_series_cases$New_Jersey <- time_series %>% filter(state=="NJ") %>% select(date,cases)
time_series_cases$Tennessee <- time_series %>% filter(state=="TN") %>% select(date,cases)
time_series_cases$District_of_Columbia <- time_series %>% filter(state=="DC") %>% select(date,cases)
ggplot(data, aes(x=state,y=population)) + geom_bar(stat="identity") +labs(x="States",y="Population") + theme_bw()
ggplot(data, aes(x=state,y=(data$actuals$cases/population))) + geom_bar(stat="identity") + labs(x="States",y="Infected (%)")+theme_bw()
data_to_plot <- tibble(Date_Alaska = time_series_cases$Alaska$date[seq(1,1300,by=100)],
Cases_Alaska = time_series_cases$Alaska$cases[seq(1,1300,by=100)],
Date_California = time_series_cases$California$date[seq(1,1300,by=100)],
Cases_California = time_series_cases$California$cases[seq(1,1300,by=100)],
Date_New_Jersey = time_series_cases$New_Jersey$date[seq(1,1300,by=100)],
Cases_New_Jersey = time_series_cases$New_Jersey$cases[seq(1,1300,by=100)],
Date_Tennessee = time_series_cases$Tennessee$date[seq(1,1300,by=100)],
Cases_Tennessee = time_series_cases$Tennessee$cases[seq(1,1300,by=100)],
Date_District_of_Columbia = time_series_cases$District_of_Columbia$date[seq(1,130
0,by=100)],
data_to_plot <- tibble(Date_Alaska = time_series_cases$Alaska$date[seq(1,1300,by=100)],
Cases_Alaska = time_series_cases$Alaska$cases[seq(1,1300,by=100)],
Date_California = time_series_cases$California$date[seq(1,1300,by=100)],
Cases_California = time_series_cases$California$cases[seq(1,1300,by=100)],
Date_New_Jersey = time_series_cases$New_Jersey$date[seq(1,1300,by=100)],
Cases_New_Jersey = time_series_cases$New_Jersey$cases[seq(1,1300,by=100)],
Date_Tennessee = time_series_cases$Tennessee$date[seq(1,1300,by=100)],
Cases_Tennessee = time_series_cases$Tennessee$cases[seq(1,1300,by=100)],
Date_District_of_Columbia = time_series_cases$District_of_Columbia$date[seq(1,1300,by=100)],
Cases_District_of_Columbia = time_series_cases$District_of_Columbia$cases[seq(1,1300,by=100)])
data_to_plot
library(cowplot)
install.packages('cowplot')
library(cowplot)
fig1<- ggplot(data_to_plot, aes(x=Date_Alaska,y=Cases_Alaska)) +
geom_point() + labs(x="Date",y="Cases", title="Alaska") + theme_bw()
fig2<- ggplot(data_to_plot, aes(x=Date_California,y=Cases_California)) +
geom_point() + labs(x="Date",y="Cases", title="California") + theme_bw()
fig3<- ggplot(data_to_plot, aes(x=Date_New_Jersey,y=Cases_New_Jersey)) +
geom_point() + labs(x="Date",y="Cases", title="New Jersey") + theme_bw()
fig4<- ggplot(data_to_plot, aes(x=Date_Tennessee,y=Cases_Tennessee)) +
geom_point() + labs(x="Date",y="Cases", title="Tennessee") + theme_bw()
fig5<- ggplot(data_to_plot, aes(x=Date_District_of_Columbia,y=Cases_District_of_Columbia)) +
geom_point() + labs(x="Date",y="Cases", title="District of Columbia") + theme_bw()
plot_grid(fig1 + theme(legend.justification = c(0,1)),
fig2 + theme(legend.justification = c(1,0)),
fig3 + theme(legend.justification = c(0,1)),
fig4 + theme(legend.justification = c(1,0)),
fig5 + theme(legend.justification = c(0,1)),
align = "v", axis = "lr", nrow=3,
ncol = 2,labels = LETTERS[1:5],
rel_heights = c(1,2))
historic_state_data_url <- "https://api.covidactnow.org/v2/states.timeseries.json?apiKey=8bcdc0d3540f4ef2a5dba2794128335f
raw_data <- GET(historic_state_data_url)
historic_state_data_url <- "https://api.covidactnow.org/v2/states.timeseries.json?apiKey=8bcdc0d3540f4ef2a5dba2794128335f
raw_data <- GET(historic_state_data_url)
historic_state_data_url <- "https://api.covidactnow.org/v2/states.timeseries.json?apiKey=8bcdc0d3540f4ef2a5dba2794128335f"
raw_data <- GET(historic_state_data_url)
historic_state_data_url <- "https://api.covidactnow.org/v2/states.timeseries.json?apiKey=8bcdc0d3540f4ef2a5dba2794128335f
raw_data <- GET(historic_state_data_url)
historic_state_data_url <- "https://api.covidactnow.org/v2/states.timeseries.json?apiKey=8bcdc0d3540f4ef2a5dba2794128335f"
raw_data <- GET(historic_state_data_url)
setwd("~/")
knitr::include_graphics("Screenshot.png")
setwd("~/GitHub/LoyYeeKeen.github.io/file")
shiny::runApp('~')
read_year_data <- function(year) {
data <- read_csv(paste0("yob", year, ".txt"), col_names = c("Name", "Gender", "Count"))
}
# Initialize a list to store data frames for each year
data_list <- list()
# Loop through the years from 1882 to 2022
for (year in 1882:2022) {
data <- read_year_data(year)
data_list[[as.character(year)]] <- data
}
# Function to filter female names
filter_female_names <- function(data) {
return(
data %>%
filter(Gender == "F")
)
}
# Function to filter male names
filter_male_names <- function(data) {
return(
data %>%
filter(Gender == "M")
)
}
# Function to merge female and male names and filter gender-neutral names
merge_names <- function(data) {
female_names <- filter_female_names(data)
male_names <- filter_male_names(data)
overlap_names <- merge(
female_names,
male_names,
by = "Name"
)
gender_neutral_names <- overlap_names %>%
filter(Count.x > 500 & Count.y > 500)
return(gender_neutral_names)
}
# Initialize a list to store gender-neutral names for each year
gender_neutral_names_list <- list()
# Process data for each year
for (year in 1882:2022) {
data <- data_list[[as.character(year)]]
gender_neutral_names <- merge_names(data)  # Call the function with the data
gender_neutral_names_list[[as.character(year)]] <- gender_neutral_names
}
# Initialize a list to store proportions for each year
proportion_list <- list()
# Calculate proportions for each year
for (year in 1882:2022) {
gender_neutral_data <- gender_neutral_names_list[[as.character(year)]]
all_names_data <- data_list[[as.character(year)]]
total_count_gender_neutral <- sum(gender_neutral_data$Count.x) + sum(gender_neutral_data$Count.y)
total_count_all_names <- sum(all_names_data$Count)
proportion <- total_count_gender_neutral / total_count_all_names
proportion_list[[as.character(year)]] <- proportion
}
# Create the proportion_df dataframe
proportion_df <- data.frame(
year = as.integer(1882:2022),
proportion = unlist(proportion_list)
)
proportion_m_list <- list()
# Calculate proportions for each year
for (year in 1882:2022) {
gender_neutral_data <- gender_neutral_names_list[[as.character(year)]]
all_names_data <- data_list[[as.character(year)]]
total_count_m <- sum(gender_neutral_data$Count.y)
total_count_all_names <- sum(all_names_data$Count)
proportion <- total_count_m / total_count_all_names
proportion_m_list[[as.character(year)]] <- proportion
}
proportion_m_df <- data.frame(
year = as.integer(1882:2022),
proportion = unlist(proportion_m_list)
)
proportion_f_list <- list()
# Calculate proportions for each year
for (year in 1882:2022) {
gender_neutral_data <- gender_neutral_names_list[[as.character(year)]]
all_names_data <- data_list[[as.character(year)]]
total_count_f <- sum(gender_neutral_data$Count.x)
total_count_all_names <- sum(all_names_data$Count)
proportion <- total_count_f / total_count_all_names
proportion_f_list[[as.character(year)]] <- proportion
}
proportion_f_df <- data.frame(
year = as.integer(1882:2022),
proportion = unlist(proportion_f_list)
)
# Create the proportion_df dataframe
proportion_f_df <- data.frame(
year = 1882:2022,
proportion = unlist(proportion_f_list)
)
gg <- ggplot(data = proportion_f_df) +
aes(x = Year, y = Proportion) +
geom_density(adjust=0.5)
gg
gg <- ggplot(data = filtered_df) +
aes(x = year, y = proportion) +
geom_density(adjust=2)
gg
gg <- ggplot(data = proportion_f_df) +
aes(x = Year, y = Proportion, group = Gender, color = Gender) +
geom_density(adjust=2)
gg
gg <- ggplot(data = proportion_f_df) +
aes(x = year, y = proportion) +
geom_density(adjust=2)
gg
gg <- ggplot(data = proportion_f_df) +
aes(x = year) +  # Defining the x-axis variable
geom_density(aes(y = proportion), adjust = 2)  # Assigning the y-axis variable for density estimation
gg  # To visualize the plot
my_tibble <- tibble(
topic = c(
"library", "filter", "select", "mutate", "pull",
"arrange(desc())", "nrow", "as.integer", "as.character",
"vector('list', length=)", "list[['']]", "unlist",
"lapply", "seq(from=, to=, by=)", "tibble",
"functions", "for loop", "slice", "c()",
"ggplot", "aes(group=)", "aes(colour=)", "facet_wrap",
"geom_bar", "paste0", "read_csv", "logical operators",
"merge", "1:5", "$", "distinct", "rep", "ifelse",
"scale_x_continuous", "reactiveVal", "observeEvent", "DT package",
"scale_colour_manual", "geom_bar(fill=)", "geom_bar(alpha=)", "guides()",
"guides(fill = guide_legend(title = NULL))"
),
week = c(
2, 4, 4, 4, 2, 4, 2, 3, 3, 3, 3, "", "","", 5, 5, 6, 4, 3, 2, 7, 7, 8,
7, 5, 3, "", "", 4, "", 4, "","", "", "","", "", "", "","", 7, "", 7, 7, ""
)
)
my_tibble <- tibble(
topic = c(
"library", "filter", "select", "mutate", "pull",
"arrange(desc())", "nrow", "as.integer", "as.character",
"vector('list', length=)", "list[['']]", "unlist",
"lapply", "seq(from=, to=, by=)", "tibble",
"functions", "for loop", "slice", "c()",
"ggplot", "aes(group=)", "aes(colour=)", "facet_wrap",
"geom_bar", "paste0", "read_csv", "logical operators",
"merge", "1:5", "$", "distinct", "rep", "ifelse",
"scale_x_continuous", "reactiveVal", "observeEvent", "DT package",
"scale_colour_manual", "geom_bar(fill=)", "geom_bar(alpha=)", "guides()",
"guides(fill = guide_legend(title = NULL))"
),
week = c(
2, 4, 4, 4, 2, 4, 2, 3, 3, 3, 3, "", "",4, 5, 5, 6, 4, 3, "", "2 & 7", 7, 7, 8, "", 8, 8, "", 5, 3, "", "", "", 4, "", "", 3, 4, "", 6,4, "", "",  "", "", "", "",  7, "", 7, 7,""
)
)
install.packages("readxl")
setwd("~/GitHub/NM2207/Week-11")
library(readxl)
# Replace "your_file_path.xlsx" with the actual path to your Excel file
data <- read_excel("week11.xlsx")
data
data <- read_excel("week11.xlsx", col_types = c("text", "text"))
data
# Assuming 'data' is your dataframe
data[data$Topic == "vector(\"list\", length=)"] <- "vector("list"", length=)"
data$Topic <- gsub('vector\\("list", length=\\)', 'vector("list", length=)', data$Topic)
data
glimpse(data)
print(n = 52)
print(data)
options(max.print = Inf)
utils::str(data, list.len = nrow(data))
print(data, n = 53)
library(readxl)
data <- read_excel("week11.xlsx")
print(data,n=53)
library(readxl)
data <- read_excel("week11.xlsx")                                         print(data,n=53)
library(readxl)
data <- read_excel("week11.xlsx")
print(data,n=53)
tinytex::install_tinytex()
library(readxl)
data <- read_excel("week11.xlsx")
data <- data %>% arrange(Week)
print(data,n=53)
