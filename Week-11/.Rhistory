ggplot(loans, aes(x = loan_amount)) +
geom_density(adjust = 1) # default bandwidth
ggplot(loans, aes(x = loan_amount)) +
geom_density(adjust = 2) +
labs( x = "Loan amount ($)", y = "Density", title = "Amounts of Lending Club loans" )
ggplot(loans, aes(x = loan_amount, fill = homeownership)) +
geom_density(adjust = 2, alpha = 0.5) +
labs(x = "Loan amount ($)",y = "Density",title = "Amounts of Lending Club loans", fill = "Homeownership")
ggplot(loans, aes(x = interest_rate)) +
geom_boxplot()
ggplot(loans, aes(x = annual_income)) +
geom_boxplot()
ggplot(loans, aes(x = interest_rate)) +geom_boxplot() +labs(x = "Interest rate (%)",y = NULL,
title = "Interest rates of Lending Club loans") +
theme( axis.ticks.y = element_blank(), axis.text.y = element_blank() )
ggplot(loans, aes(x = interest_rate,
y = grade)) +
geom_boxplot() +
labs(x = "Interest rate (%)",y = "Grade",title = "Interest rates of Lending Club loans",subtitle="by grade of loan")
ggplot(loans, aes(x = debt_to_income, y = interest_rate)) +
geom_point()
ggplot(loans, aes(x = homeownership, fill = grade)) +
geom_bar(position = "fill")
ggplot(loans, aes(x = homeownership,
fill = grade)) #split each grade by colour
+ geom_bar()
ggplot(loans, aes(x = homeownership,
fill = grade)) #split each grade by colour
+ geom_bar()
ggplot(loans, aes(x = homeownership,
fill = grade)) #split each grade by colour
+ geom_bar()
ggplot(loans, aes(x = homeownership,
fill = grade)) + geom_bar() #split each grade by colour
ggplot(data = penguins) #plot data
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm))
#plot data with x axis as bill depth
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm))
#plot data with x axis as bill depth and y axis is bill length
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm)) +
geom_point()
#plot points
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point()
#colour the point according to species
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length")
#title the plot
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie,
Chinstrap, and Gentoo Penguins")
#add subtitle
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Bill depth (mm)",
y = "Bill length (mm)")
#label x and y axis
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Bill depth (mm)", y = "Bill length (mm)",
colour = "Species")
#label legend
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Bill depth (mm)", y = "Bill length (mm)",
colour = "Species",
caption = "Source: Palmer Station LTER/palmerpenguin.package")
#add caption
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Bill depth (mm)", y = "Bill length (mm)",
colour = "Species",
caption = "Source: Palmer Station LTER/palmerpenguin.package") +
scale_colour_viridis_d()
#change colour scale of points
#first way of writing the code
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
scale_colour_viridis_d()
ggplot(penguins) + aes(x = bill_depth_mm, y = bill_length_mm,
colour = species) + geom_point() + scale_colour_viridis_d()
#map colour to species
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm, colour = species,
shape = island)) + geom_point() + scale_colour_viridis_d()
#map shape to island
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm, colour = species,
shape = species)) + geom_point() + scale_colour_viridis_d()
#map shape and colour to species
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm, colour = species, shape = species,
size = body_mass_g)) + geom_point() + scale_colour_viridis_d()
#map shape and colour to size
#map size and transparency according o bill length and body length respectively
ggplot(penguins) +
aes(x = bill_depth_mm,
y = bill_length_mm,
size = body_mass_g,
alpha = flipper_length_mm) +
geom_point()
#set point size = 2 and transparency to 0.5
ggplot(penguins) +
aes(x = bill_depth_mm,
y = bill_length_mm) +
geom_point(size = 2, alpha = 0.5)
ggplot(penguins) +
aes(x = bill_depth_mm,
y = bill_length_mm) +
geom_point() +
facet_grid(species ~ island)
#plot each species against each island
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm, color = species)) +
geom_point() + facet_grid(species ~ sex) + scale_color_viridis_d() +
guides(color = "none") #remove colour legend
library(openintro) #load package openintro
glimpse(loans_full_schema) #see the columns of dataset stacked on top of one another
loans <- loans_full_schema %>%
select(loan_amount, interest_rate, term, grade,
state, annual_income, homeownership, debt_to_income) #select columns loan_amount, interest_rate, term, grade, state, annual_income, homeownership and debt_to_income
glimpse(loans) #see the columns of loans dataset stacked on top of one another
ggplot(loans) + aes(x = loan_amount) +
geom_histogram()
# plot a histogram of loan amount
# binwidth = 1000
ggplot(loans, aes(x = loan_amount)) +
geom_histogram(binwidth = 1000) #set bidwidth to 1000
# binwidth = 5000
ggplot(loans, aes(x = loan_amount)) +
geom_histogram(binwidth = 5000) #set bidwidth to 5000
# binwidth = 20000
ggplot(loans, aes(x = loan_amount)) +
geom_histogram(binwidth = 20000) #set bidwidth to 20000
ggplot(loans, aes(x = loan_amount)) + geom_histogram(binwidth = 5000) +
labs(x = "Loan amount ($)", y = "Frequency", title = "Amounts of Lending Club loans") #label x axis as "Loan amount ($)", y axis as "Frequency", set title as "Amounts of Lending Club loans"
ggplot(loans, aes(x = loan_amount, fill = homeownership)) #split ownership by colour
+ geom_histogram(binwidth = 5000, alpha = 0.5) +
labs(x = "Loan amount ($)",y = "Frequency",title = "Amounts of Lending Club loans")
ggplot(loans, aes(x = loan_amount, fill = homeownership)) + geom_histogram(binwidth = 5000, alpha = 0.5) +
labs(x = "Loan amount ($)",y = "Frequency",title = "Amounts of Lending Club loans")
#split ownership by colour
ggplot(loans, aes(x = loan_amount, fill = homeownership)) + geom_histogram(binwidth = 5000) +
labs(x = "Loan amount ($)",y = "Frequency",title = "Amounts of Lending Club loans") +
facet_wrap(~ homeownership, nrow = 3) #plot each type of ownership
ggplot(loans, aes(x = loan_amount)) +
geom_density() #plot a density plot
ggplot(loans, aes(x = loan_amount)) +
geom_density(adjust = 0.5) #adjust bandwidth to 0.5
ggplot(loans, aes(x = loan_amount)) +
geom_density(adjust = 1) # default bandwidth
ggplot(loans, aes(x = loan_amount)) +
geom_density(adjust = 2) #adjust bandwidth to 2
ggplot(loans, aes(x = loan_amount)) +
geom_density(adjust = 2) +
labs( x = "Loan amount ($)", y = "Density", title = "Amounts of Lending Club loans" ) #
ggplot(loans, aes(x = loan_amount, fill = homeownership)) +
geom_density(adjust = 2, alpha = 0.5) +
labs(x = "Loan amount ($)",y = "Density",title = "Amounts of Lending Club loans", fill = "Homeownership") #label x axis as "Loan amount ($)", y axis as "Frequency", set title as "Amounts of Lending Club loans"
ggplot(loans, aes(x = interest_rate)) +
geom_boxplot() #plot a boxplot of interest rate
ggplot(loans, aes(x = annual_income)) +
geom_boxplot() #plot a boxplot of annual income
ggplot(loans, aes(x = interest_rate)) +geom_boxplot() +labs(x = "Interest rate (%)",y = NULL,
title = "Interest rates of Lending Club loans") +
theme( axis.ticks.y = element_blank(), axis.text.y = element_blank() ) #decrease the tick marks of the x axis to 10
ggplot(loans, aes(x = interest_rate,
y = grade)) #add a categorical variable grade and plot it as the yaxis
+ geom_boxplot() +
labs(x = "Interest rate (%)",y = "Grade",title = "Interest rates of Lending Club loans",subtitle="by grade of loan")
#add a categorical variable grade and plot it as the yaxis
ggplot(loans, aes(x = interest_rate,
y = grade)) + geom_boxplot() +
labs(x = "Interest rate (%)",y = "Grade",title = "Interest rates of Lending Club loans",subtitle="by grade of loan")
ggplot(loans, aes(x = debt_to_income, y = interest_rate)) +
geom_point()#plot a scatterplot
ggplot(loans, aes(y = homeownership, fill = grade)) + geom_bar(position = "fill") +
labs( x = "Proportion", y = "Homeownership", fill = "Grade", title = "Grades of Lending Club loans", subtitle="and home ownership of lendee") #label x and y axis, add title, add subtitle, split each grade by colour
#plot a histogram wih homeownership on the y axis
ggplot(loans, aes(y = homeownership, fill = grade)) + geom_bar(position = "fill") +
labs( x = "Proportion", y = "Homeownership", fill = "Grade", title = "Grades of Lending Club loans", subtitle="and home ownership of lendee")
#label x and y axis, add title, add subtitle, split each grade by colour
ggplot(loans, aes(x = homeownership, y = loan_amount)) +
geom_violin() #plot a violin plot
library(ggridges) #load ggridges package
ggplot(loans, aes(x = loan_amount, y = grade, fill = grade, color = grade)) +
geom_density_ridges(alpha = 0.5) #plot ridge plot
ggplot(loans, aes(x = debt_to_income, y = interest_rate)) +
geom_hex() #plot a hex plot
ggplot(loans %>% filter(debt_to_income < 100),
aes(x = debt_to_income, y = interest_rate)) +
geom_hex() #plot a hex plot for debt_to_income < 100
knitr::include_graphics("dino.png")
matching_values <- merge(girlnames$V1, boynames$V1)
library(tidyverse)
tidydata <- tribble(
~country, ~year, ~cases, ~population,
"Afghanistan", 1999, 745, 19987071,
"Afghanistan", 2000, 2666, 20595360,
"Brazil", 1999, 37737, 172006362,
"Brazil", 2000, 80488, 174504898,
"China", 1999, 212258, 1272915272,
"China", 2000, 213766, 1280428583)
tidydata
#separate the column rate into 2 columns--cases and population
tidieddata <- nontidydata %>%
separate(rate, into = c("cases",
"population"),
sep = "/")
nontidydata <- tribble(
~country,~year,~rate,
"Afghanistan", 1999, "745/19987071",
"Afghanistan", 2000, "2666/20595360",
"Brazil", 1999, "37737/172006362",
"Brazil", 2000, "80488/174504898",
"China", 1999, "212258/1272915272",
"China", 2000, "213766/1280428583")
nontidydata
#separate the column rate into 2 columns--cases and population
tidieddata <- nontidydata %>%
separate(rate, into = c("cases",
"population"),
sep = "/")
tidieddata
# merge all the columns from cases to population into a new column called measurement, and assign the values of measurement based on the values of the columns from cases to population
newtidieddata <- tidieddata %>%
pivot_longer(
cols = cases:population,
names_to = "measurement",
values_to = "value"
)
newtidieddata
library(tidyverse)
library(tidyverse)
billboard
pivot_longer(cols=starts_with("wk"),values_to=value)
billboard %>% pivot_longer(cols=starts_with("wk"),values_to=value)
billboard %>% pivot_longer(cols=starts_with("wk"),names_to="Week",values_to="Value")
pivot_longer(cols=starts_with("wk"),names_to="Week",values_to="Value")
billboard %>% pivot_longer(cols=starts_with("wk"),names_to="Week",values_to="Value")
billboard %>% pivot_longer(cols=starts_with("wk"),names_to="week",values_to="rank")
billboard %>% pivot_longer(cols=starts_with("wk"),names_to="week",values_to="rank",values_drop_na = TRUE)
billboard %>% pivot_longer(cols=starts_with("wk"),names_to="week",values_to="rank",values_drop_na = TRUE) %>% mutate(week = parse_number(week))
library(ggplot2)
billboard<-billboard %>% pivot_longer(cols=starts_with("wk"),names_to="week",values_to="rank",values_drop_na = TRUE) %>% mutate(week = parse_number(week))
ggplot(data=billboard)+
aes(x=week,y=rank)+
geom_line()
cms_patient_experience
cms_patient_experience %>% pivot_wider(names_from="measure_cd",values_from = ="prf_rate")
cms_patient_experience %>% pivot_wider(names_from="measure_cd",values_from = "prf_rate")
cms_patient_experience %>% pivot_wider(names_from="measure_cd",values_from = "prf_rate",id_cols = starts_with("org"))
library(ggplot2)
billboard<-billboard %>% pivot_longer(cols=starts_with("wk"),names_to="week",values_to="rank",values_drop_na = TRUE) %>% mutate(week = parse_number(week))
billboard %>% pivot_longer(cols=starts_with("wk"),names_to="week",values_to="rank",values_drop_na = TRUE) %>% mutate(week = parse_number(week))
library(ggplot2)
billboard<-billboard %>% pivot_longer(cols=starts_with("wk"),names_to="week",values_to="rank",values_drop_na = TRUE) %>% mutate(week = parse_number(week))
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80), tidy=TRUE)
library(tidyverse) #load tidyverse package
#create a dataframe, tidydata, with values manually keyed into the tribble function
tidydata <- tribble(
~country, ~year, ~cases, ~population,
"Afghanistan", 1999, 745, 19987071,
"Afghanistan", 2000, 2666, 20595360,
"Brazil", 1999, 37737, 172006362,
"Brazil", 2000, 80488, 174504898,
"China", 1999, 212258, 1272915272,
"China", 2000, 213766, 1280428583)
tidydata
#create a dataframe, nontidydata, with values manually keyed into the tribble function
nontidydata <- tribble(
~country,~year,~rate,
"Afghanistan", 1999, "745/19987071",
"Afghanistan", 2000, "2666/20595360",
"Brazil", 1999, "37737/172006362",
"Brazil", 2000, "80488/174504898",
"China", 1999, "212258/1272915272",
"China", 2000, "213766/1280428583")
nontidydata
#separate the column rate into 2 columns--cases and population
tidieddata <- nontidydata %>%
separate(rate, into = c("cases",
"population"),
sep = "/")
tidieddata
# Assign the column names of all the columns from cases to population as the values of a new column called measurement.
#Assign the values of all the columns from cases to population into a new column called value
newtidieddata <- tidieddata %>%
pivot_longer(
cols = cases:population,
names_to = "measurement",
values_to = "value"
)
newtidieddata
# create a new dataframe, df, with the values manually keyed into the function tribble
df <- tribble(
~id, ~bp1, ~bp2,
"A", 100, 120,
"B", 140, 115,
"C", 120, 125
)
df
# Assign the column names of all the columns from bp1 to bp2 as the values of a new column called measurement.
# Assign the values of all the columns from bp1 to bp2 into a new column called value
df %>%
pivot_longer(
cols = bp1:bp2,
names_to = "measurement",
values_to = "value"
)
#Create new columns based on the values of the column "measurement"
#Assign to these columns the values from the column "value"
newtidieddata %>%
pivot_wider(names_from="measurement",
values_from="value")
#Create a dataframe, df, with values manually keyed into the tribble function
df <- tribble(
~id, ~measurement, ~value,
"A", "bp1", 100,
"B", "bp1", 140,
"B", "bp2", 115,
"A", "bp2", 120,
"A", "bp3", 105
)
df
#Create new columns based on the values of the column "measurement"
#Assign to these columns the values from the column "value"
df %>%
pivot_wider(
names_from = measurement,
values_from = value
)
library(tidyverse)
billboard
billboard %>% pivot_longer(cols=starts_with("wk"),names_to="week",values_to="rank")
billboard %>% pivot_longer(
cols=starts_with("wk"),
names_to="week",
values_to="rank"
)
billboard %>% pivot_longer(
cols=starts_with("wk"),
names_to="week",
values_to="rank",
values_drop_na = TRUE
)
billboard %>% pivot_longer(
cols=starts_with("wk"),
names_to="week",
values_to="rank"
)
library(tidyverse)
billboard <- billboard %>%
mutate(week = paste0("wk", week)) %>%
pivot_wider(names_from = week, values_from = rank)
billboard <- billboard %>%
mutate(week = paste0("wk", week)) %>%
pivot_wider(names_from = week, values_from = rank)
billboard
library(tidyverse)
billboard
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80), tidy=TRUE)
library(tidyverse) #load tidyverse package
#create a dataframe, tidydata, with values manually keyed into the tribble function
tidydata <- tribble(
~country, ~year, ~cases, ~population,
"Afghanistan", 1999, 745, 19987071,
"Afghanistan", 2000, 2666, 20595360,
"Brazil", 1999, 37737, 172006362,
"Brazil", 2000, 80488, 174504898,
"China", 1999, 212258, 1272915272,
"China", 2000, 213766, 1280428583)
tidydata
#create a dataframe, nontidydata, with values manually keyed into the tribble function
nontidydata <- tribble(
~country,~year,~rate,
"Afghanistan", 1999, "745/19987071",
"Afghanistan", 2000, "2666/20595360",
"Brazil", 1999, "37737/172006362",
"Brazil", 2000, "80488/174504898",
"China", 1999, "212258/1272915272",
"China", 2000, "213766/1280428583")
nontidydata
#separate the column rate into 2 columns--cases and population
tidieddata <- nontidydata %>%
separate(rate, into = c("cases",
"population"),
sep = "/")
tidieddata
# Assign the column names of all the columns from cases to population as the values of a new column called measurement.
#Assign the values of all the columns from cases to population into a new column called value
newtidieddata <- tidieddata %>%
pivot_longer(
cols = cases:population,
names_to = "measurement",
values_to = "value"
)
newtidieddata
# create a new dataframe, df, with the values manually keyed into the function tribble
df <- tribble(
~id, ~bp1, ~bp2,
"A", 100, 120,
"B", 140, 115,
"C", 120, 125
)
df
# Assign the column names of all the columns from bp1 to bp2 as the values of a new column called measurement.
# Assign the values of all the columns from bp1 to bp2 into a new column called value
df %>%
pivot_longer(
cols = bp1:bp2,
names_to = "measurement",
values_to = "value"
)
#Create new columns based on the values of the column "measurement"
#Assign to these columns the values from the column "value"
newtidieddata %>%
pivot_wider(names_from="measurement",
values_from="value")
#Create a dataframe, df, with values manually keyed into the tribble function
df <- tribble(
~id, ~measurement, ~value,
"A", "bp1", 100,
"B", "bp1", 140,
"B", "bp2", 115,
"A", "bp2", 120,
"A", "bp3", 105
)
df
#Create new columns based on the values of the column "measurement"
#Assign to these columns the values from the column "value"
df %>%
pivot_wider(
names_from = measurement,
values_from = value
)
library(tidyverse)
billboard
billboard %>% pivot_longer(
cols=starts_with("wk"),
names_to="week",
values_to="rank"
)
billboard %>% pivot_longer(
cols=starts_with("wk"),
names_to="week",
values_to="rank",
values_drop_na = TRUE
)
billboard %>% pivot_longer(cols=starts_with("wk"),names_to="week",values_to="rank",values_drop_na = TRUE) %>% mutate(week = parse_number(week))
library(ggplot2)
billboard<-billboard %>% pivot_longer(cols=starts_with("wk"),names_to="week",values_to="rank",values_drop_na = TRUE) %>% mutate(week = parse_number(week))
ggplot(data=billboard)+
aes(x=week,y=rank,group=track)+
geom_line()
cms_patient_experience
cms_patient_experience %>% pivot_wider(names_from="measure_cd",values_from = "prf_rate")
cms_patient_experience %>% pivot_wider(names_from="measure_cd",values_from = "prf_rate",id_cols = starts_with("org"))
install.packages("remotes")
# Install using the remotes package
remotes::install_github("rstudio/shinyuieditor")
library(shiny); runApp('GitHub/LoyYeeKeen.github.io/file/runapp.R')
runApp('GitHub/LoyYeeKeen.github.io/file/runapp.R')
runApp('GitHub/LoyYeeKeen.github.io/file/runapp.R')
runApp('GitHub/LoyYeeKeen.github.io/file/runapp.R')
runApp('GitHub/LoyYeeKeen.github.io/file/runapp.R')
library(shiny); runApp('GitHub/LoyYeeKeen.github.io/app123.R')
?stat_count
?stat_count()
??stat_count
?geom_col
??geom_col
?geom_bar
setwd("~/GitHub/NM2207/Week-11")
setwd("~/GitHub/NM2207/Week-11")
getwd()
