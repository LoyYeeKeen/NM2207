# Enter code here
word <- readline("Enter a word: ")
index <- nchar(word)
reversed_word <- character(1)
while (index > 0) {
char <- substr(word, index, index)
reversed_word <- paste0(reversed_word, char, sep = "")
index <- index - 1
}
cat("Reversed word:", reversed_word, "\n")
class_3_survivors
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(palmerpenguins)
install.packages('tidyverse')
install.packages("tidyverse")
install.packages('palmerpenguins')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(palmerpenguins)
glimpse(penguins)
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length")
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins"
x = "Bill depth (mm)", y = "Bill length (mm)"
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Bill depth (mm)",
y = "Bill length (mm)")
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Bill depth (mm)", y = "Bill length (mm)",
colour = "Species")
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Bill depth (mm)", y = "Bill length (mm)",
colour = "Species",
caption = "Source: Palmer Station LTER/palmerpenguin.package")
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Bill depth (mm)", y = "Bill length (mm)",
colour = "Species",
caption = "Source: Palmer Station LTER/palmerpenguin.package",
scale_colour_viridis_d()
)
install.packages("scale_colour_viridis_d")
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Bill depth (mm)", y = "Bill length (mm)",
colour = "Species",
caption = "Source: Palmer Station LTER/palmerpenguin.package",
scale_colour_viridis_d()
)
library(scale_colour_viridis_d)
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Bill depth (mm)", y = "Bill length (mm)",
colour = "Species",
caption = "Source: Palmer Station LTER/palmerpenguin.package") +
scale_colour_viridis_d()
ggplot(loans, aes(x = debt_to_income, y = interest_rate)) +
geom_hex()
ggplot(loans, aes(x = debt_to_income, y = interest_rate)) +
geom_point()
ggplot(loans, aes(x = interest_rate,
y = grade)) +
geom_boxplot() +
labs(x = "Interest rate (%)",y = "Grade",title = "Interest rates of Lending Club loans",subtitle="by grade of loan")
ggplot(loans, aes(x = interest_rate,
y = grade)) +
geom_boxplot() +
labs(x = "Interest rate (%)",y = "Grade",title = "Interest rates of Lending Club loans",subtitle="by grade of loan")
ggplot(loans, aes(x = interest_rate)) +geom_boxplot() +labs(x = "Interest rate (%)",y = NULL,
title = "Interest rates of Lending Club loans") +
theme( axis.ticks.y = element_blank(), axis.text.y = element_blank() )
library(openintro)
glimpse(loans_full_schema)
ggplot(loans, aes(x = debt_to_income, y = interest_rate)) +
geom_hex()
ggplot(loans, aes(x = debt_to_income, y = interest_rate)) +
geom_hex()
loans <- loans_full_schema %>%
select(loan_amount, interest_rate, term, grade,
state, annual_income, homeownership, debt_to_income)
glimpse(loans)
ggplot(loans, aes(x = debt_to_income, y = interest_rate)) +
geom_hex()
install.packages('ggridges')
library(ggridges)
ggplot(loans, aes(x = loan_amount, y = grade, fill = grade, color = grade)) +
geom_density_ridges(alpha = 0.5)
ggplot(loans, aes(x = loan_amount)) + geom_histogram(binwidth = 5000) +
labs(x = "Loan amount ($)", y = "Frequency", title = "Amounts of Lending Club loans")
ggplot(loans, aes(x = loan_amount, fill = homeownership)) +
geom_histogram(binwidth = 5000, alpha = 0.5) +
labs(x = "Loan amount ($)",y = "Frequency",title = "Amounts of Lending Club loans")
ggplot(loans, aes(x = loan_amount, fill = homeownership)) + geom_histogram(binwidth = 5000) +
labs(x = "Loan amount ($)",y = "Frequency",title = "Amounts of Lending Club loans") +
facet_wrap(~ homeownership, nrow = 3)
ggplot(loans, aes(x = loan_amount)) +
geom_density()
ggplot(loans, aes(x = loan_amount)) +
geom_density(adjust = 0.5)
ggplot(loans, aes(x = loan_amount)) +
geom_density(adjust = 1) # default bandwidth
ggplot(loans, aes(x = loan_amount)) +
geom_density(adjust = 2) +
labs( x = "Loan amount ($)", y = "Density", title = "Amounts of Lending Club loans" )
ggplot(loans, aes(x = loan_amount, fill = homeownership)) +
geom_density(adjust = 2, alpha = 0.5) +
labs(x = "Loan amount ($)",y = "Density",title = "Amounts of Lending Club loans", fill = "Homeownership")
ggplot(loans, aes(x = interest_rate)) +
geom_boxplot()
ggplot(loans, aes(x = annual_income)) +
geom_boxplot()
ggplot(loans, aes(x = interest_rate)) +geom_boxplot() +labs(x = "Interest rate (%)",y = NULL,
title = "Interest rates of Lending Club loans") +
theme( axis.ticks.y = element_blank(), axis.text.y = element_blank() )
ggplot(loans, aes(x = interest_rate,
y = grade)) +
geom_boxplot() +
labs(x = "Interest rate (%)",y = "Grade",title = "Interest rates of Lending Club loans",subtitle="by grade of loan")
ggplot(loans, aes(x = debt_to_income, y = interest_rate)) +
geom_point()
ggplot(loans, aes(x = homeownership, fill = grade)) +
geom_bar(position = "fill")
ggplot(loans, aes(x = homeownership,
fill = grade)) #split each grade by colour
+ geom_bar()
ggplot(loans, aes(x = homeownership,
fill = grade)) #split each grade by colour
+ geom_bar()
ggplot(loans, aes(x = homeownership,
fill = grade)) #split each grade by colour
+ geom_bar()
ggplot(loans, aes(x = homeownership,
fill = grade)) + geom_bar() #split each grade by colour
ggplot(data = penguins) #plot data
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm))
#plot data with x axis as bill depth
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm))
#plot data with x axis as bill depth and y axis is bill length
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm)) +
geom_point()
#plot points
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point()
#colour the point according to species
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length")
#title the plot
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie,
Chinstrap, and Gentoo Penguins")
#add subtitle
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Bill depth (mm)",
y = "Bill length (mm)")
#label x and y axis
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Bill depth (mm)", y = "Bill length (mm)",
colour = "Species")
#label legend
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Bill depth (mm)", y = "Bill length (mm)",
colour = "Species",
caption = "Source: Palmer Station LTER/palmerpenguin.package")
#add caption
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Bill depth (mm)", y = "Bill length (mm)",
colour = "Species",
caption = "Source: Palmer Station LTER/palmerpenguin.package") +
scale_colour_viridis_d()
#change colour scale of points
#first way of writing the code
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
scale_colour_viridis_d()
ggplot(penguins) + aes(x = bill_depth_mm, y = bill_length_mm,
colour = species) + geom_point() + scale_colour_viridis_d()
#map colour to species
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm, colour = species,
shape = island)) + geom_point() + scale_colour_viridis_d()
#map shape to island
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm, colour = species,
shape = species)) + geom_point() + scale_colour_viridis_d()
#map shape and colour to species
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm, colour = species, shape = species,
size = body_mass_g)) + geom_point() + scale_colour_viridis_d()
#map shape and colour to size
#map size and transparency according o bill length and body length respectively
ggplot(penguins) +
aes(x = bill_depth_mm,
y = bill_length_mm,
size = body_mass_g,
alpha = flipper_length_mm) +
geom_point()
#set point size = 2 and transparency to 0.5
ggplot(penguins) +
aes(x = bill_depth_mm,
y = bill_length_mm) +
geom_point(size = 2, alpha = 0.5)
ggplot(penguins) +
aes(x = bill_depth_mm,
y = bill_length_mm) +
geom_point() +
facet_grid(species ~ island)
#plot each species against each island
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm, color = species)) +
geom_point() + facet_grid(species ~ sex) + scale_color_viridis_d() +
guides(color = "none") #remove colour legend
library(openintro) #load package openintro
glimpse(loans_full_schema) #see the columns of dataset stacked on top of one another
loans <- loans_full_schema %>%
select(loan_amount, interest_rate, term, grade,
state, annual_income, homeownership, debt_to_income) #select columns loan_amount, interest_rate, term, grade, state, annual_income, homeownership and debt_to_income
glimpse(loans) #see the columns of loans dataset stacked on top of one another
ggplot(loans) + aes(x = loan_amount) +
geom_histogram()
# plot a histogram of loan amount
# binwidth = 1000
ggplot(loans, aes(x = loan_amount)) +
geom_histogram(binwidth = 1000) #set bidwidth to 1000
# binwidth = 5000
ggplot(loans, aes(x = loan_amount)) +
geom_histogram(binwidth = 5000) #set bidwidth to 5000
# binwidth = 20000
ggplot(loans, aes(x = loan_amount)) +
geom_histogram(binwidth = 20000) #set bidwidth to 20000
ggplot(loans, aes(x = loan_amount)) + geom_histogram(binwidth = 5000) +
labs(x = "Loan amount ($)", y = "Frequency", title = "Amounts of Lending Club loans") #label x axis as "Loan amount ($)", y axis as "Frequency", set title as "Amounts of Lending Club loans"
ggplot(loans, aes(x = loan_amount, fill = homeownership)) #split ownership by colour
+ geom_histogram(binwidth = 5000, alpha = 0.5) +
labs(x = "Loan amount ($)",y = "Frequency",title = "Amounts of Lending Club loans")
ggplot(loans, aes(x = loan_amount, fill = homeownership)) + geom_histogram(binwidth = 5000, alpha = 0.5) +
labs(x = "Loan amount ($)",y = "Frequency",title = "Amounts of Lending Club loans")
#split ownership by colour
ggplot(loans, aes(x = loan_amount, fill = homeownership)) + geom_histogram(binwidth = 5000) +
labs(x = "Loan amount ($)",y = "Frequency",title = "Amounts of Lending Club loans") +
facet_wrap(~ homeownership, nrow = 3) #plot each type of ownership
ggplot(loans, aes(x = loan_amount)) +
geom_density() #plot a density plot
ggplot(loans, aes(x = loan_amount)) +
geom_density(adjust = 0.5) #adjust bandwidth to 0.5
ggplot(loans, aes(x = loan_amount)) +
geom_density(adjust = 1) # default bandwidth
ggplot(loans, aes(x = loan_amount)) +
geom_density(adjust = 2) #adjust bandwidth to 2
ggplot(loans, aes(x = loan_amount)) +
geom_density(adjust = 2) +
labs( x = "Loan amount ($)", y = "Density", title = "Amounts of Lending Club loans" ) #
ggplot(loans, aes(x = loan_amount, fill = homeownership)) +
geom_density(adjust = 2, alpha = 0.5) +
labs(x = "Loan amount ($)",y = "Density",title = "Amounts of Lending Club loans", fill = "Homeownership") #label x axis as "Loan amount ($)", y axis as "Frequency", set title as "Amounts of Lending Club loans"
ggplot(loans, aes(x = interest_rate)) +
geom_boxplot() #plot a boxplot of interest rate
ggplot(loans, aes(x = annual_income)) +
geom_boxplot() #plot a boxplot of annual income
ggplot(loans, aes(x = interest_rate)) +geom_boxplot() +labs(x = "Interest rate (%)",y = NULL,
title = "Interest rates of Lending Club loans") +
theme( axis.ticks.y = element_blank(), axis.text.y = element_blank() ) #decrease the tick marks of the x axis to 10
ggplot(loans, aes(x = interest_rate,
y = grade)) #add a categorical variable grade and plot it as the yaxis
+ geom_boxplot() +
labs(x = "Interest rate (%)",y = "Grade",title = "Interest rates of Lending Club loans",subtitle="by grade of loan")
#add a categorical variable grade and plot it as the yaxis
ggplot(loans, aes(x = interest_rate,
y = grade)) + geom_boxplot() +
labs(x = "Interest rate (%)",y = "Grade",title = "Interest rates of Lending Club loans",subtitle="by grade of loan")
ggplot(loans, aes(x = debt_to_income, y = interest_rate)) +
geom_point()#plot a scatterplot
ggplot(loans, aes(y = homeownership, fill = grade)) + geom_bar(position = "fill") +
labs( x = "Proportion", y = "Homeownership", fill = "Grade", title = "Grades of Lending Club loans", subtitle="and home ownership of lendee") #label x and y axis, add title, add subtitle, split each grade by colour
#plot a histogram wih homeownership on the y axis
ggplot(loans, aes(y = homeownership, fill = grade)) + geom_bar(position = "fill") +
labs( x = "Proportion", y = "Homeownership", fill = "Grade", title = "Grades of Lending Club loans", subtitle="and home ownership of lendee")
#label x and y axis, add title, add subtitle, split each grade by colour
ggplot(loans, aes(x = homeownership, y = loan_amount)) +
geom_violin() #plot a violin plot
library(ggridges) #load ggridges package
ggplot(loans, aes(x = loan_amount, y = grade, fill = grade, color = grade)) +
geom_density_ridges(alpha = 0.5) #plot ridge plot
ggplot(loans, aes(x = debt_to_income, y = interest_rate)) +
geom_hex() #plot a hex plot
ggplot(loans %>% filter(debt_to_income < 100),
aes(x = debt_to_income, y = interest_rate)) +
geom_hex() #plot a hex plot for debt_to_income < 100
knitr::include_graphics("dino.png")
# Replace 'README.md' with the actual name of your README file
readme_file <- "yob2022.txt"
# Read the contents of the README file
readme_text <- readLines(readme_file, warn = FALSE)
setwd("~/")
setwd("~/LoyYeeKeen.github.io")
# Replace 'README.md' with the actual name of your README file
readme_file <- "yob2022.txt"
# Read the contents of the README file
readme_text <- readLines(readme_file, warn = FALSE)
# Extract the data (assuming it's in a simple CSV-like format with no headers)
data <- read.csv(text = paste(readme_text, collapse = "\n"), header = FALSE)
# Save the data to a CSV file
write.csv(data, "output.csv", row.names = FALSE)
library('tidyverse')
names2022<-read_csv("output.csv")
names2022
girlnames2022<-names2022%>%filter(V2=="F")
boynames2022<-names2022%>%filter(V2=="M")
matching_values <- merge(girlnames2022, boynames2022, by = "V1", all = TRUE)
matching_values
matching_values <- merge(girlnames2022, boynames2022, by = "V1")
matching_values
popular<-matching_values%>%filter(V3.x>100 & V3.y>100)
popular
popular<-matching_values%>%filter(V3.x & V3.y>100)
popular
popular<-matching_values%>%filter(V3.x>100 & V3.y>100)
popular
popular<-matching_values%>%filter(V3.x>500 & V3.y>500)
popular
popular<-matching_values%>%filter(V3.x>1000 & V3.y>1000)
popular
popular<-matching_values%>%filter(V3.x>=1000 & V3.y>=1000)
popular
popular<-matching_values%>%filter(V3.x>=1500 & V3.y>=1500)
popular
count(matching_values)
# Replace 'README.md' with the actual name of your README file
readme_file <- "yob2012.txt"
# Read the contents of the README file
readme_text <- readLines(readme_file, warn = FALSE)
# Extract the data (assuming it's in a simple CSV-like format with no headers)
data <- read.csv(text = paste(readme_text, collapse = "\n"), header = FALSE)
# Save the data to a CSV file
write.csv(data, "output.csv", row.names = FALSE)
names2012<-read_csv("output.csv")
names2012
girlnames2012<-names2012%>%filter(V2=="F")
boynames2012<-names2012%>%filter(V2=="M")
matching_values2 <- merge(girlnames2012, boynames2012, by = "V1")
matching_values2
count(matching_values2)
count(matching_values)
# Replace 'README.md' with the actual name of your README file
readme_file <- "yob1922.txt"
# Read the contents of the README file
readme_text <- readLines(readme_file, warn = FALSE)
# Extract the data (assuming it's in a simple CSV-like format with no headers)
data <- read.csv(text = paste(readme_text, collapse = "\n"), header = FALSE)
# Save the data to a CSV file
write.csv(data, "output.csv", row.names = FALSE)
names1922<-read_csv("output.csv")
names1922
girlnames<-names1922%>%filter(V2=="F")
boynames<-names1922%>%filter(V2=="M")
matching_values3 <- merge(girlnames, boynames, by = "v1")
matching_values3 <- merge(girlnames, boynames, by = "V1")
count(matching_values3)
matching_values3
popular2<-matching_values2%>%filter(V3.x>=100 & V3.y>100)
popular2
popular2<-matching_values2%>%filter(V3.x>=500 & V3.y>500)
popular2
popular<-matching_values%>%filter(V3.x>=500 & V3.y>500)
popular
popular3<-matching_values3%>%filter(V3.x>=500 & V3.y>500)
popular3
popular3<-matching_values3%>%filter(V3.x>=100 & V3.y>100)
popular2
popular3
popular3<-matching_values3%>%filter(V3.x>=500 & V3.y>500)
popular1<-popular
popular<-merge(popular1,popular2,by="V1")
popular<-merge(popular,poular2,by="V1")
popular<-merge(popular,popular3,by="V1")
popular
popular3<-matching_values3%>%filter(V3.x>=500 & V3.y>500)
popular3
popular<-merge(popular1,popular2,by="V1")
popular
popular<-merge(popular,popular3,by="V1")
popular
gnnames<-popular3$V1
gnnames %in% names2022
names2022
names2022["Billie"]
names2022[V1=="Billie"]
names2022
which[names2022$V1=="Billie"]
names2022$V1=="Billie"
is_present <- any(names2022 == "Billie")
is_present
is_present <- any(girlnames2022 == "Billie")
is_present
any(boynames2022 == "Billie")
any(boynames2022 == "Billie")
any(girlnames2012 == "Billie")
any(boynames2012 == "Billie")
count(boynames2012 == "Billie")
count(boynames2012$V1 == "Billie")
Billie<-boynames2012$V1 == "Billie"
count(Billie)
Billie
girlnames2022 %>% filter(V1=="Billie") %>% select(V3)
boynames2022 %>% filter(V1=="Billie") %>% select(V3)
boynames2012 %>% filter(V1=="Billie") %>% select(V3)
girlnames2012 %>% filter(V1=="Billie") %>% select(V3)
girlnames2012 %>% filter(V1=="Francis") %>% select(V3)
girlnames2022 %>% filter(V1=="Francis") %>% select(V3)
boynames2022 %>% filter(V1=="Francis") %>% select(V3)
boynames2012 %>% filter(V1=="Francis") %>% select(V3)
count(boynames2022)
14255/430
430/14255
Francis2012<-girlnames2012 %>% filter(V1=="Francis") %>% select(V3)
Francis2022<-girlnames2022 %>% filter(V1=="Francis") %>% select(V3)
Francis2012/count(girlnames2012)
Francis2022/count(girlnames2022)
Francis2022/count(names2022)
Francis2012/count(names2022)
Francis1922<-girlnames1922 %>% filter(V1=="Francis") %>% select(V3)
names1922
girlnames1922<-names1922%>%filter(V2=="F")
Francis1922<-girlnames1922 %>% filter(V1=="Francis") %>% select(V3)
count(Francis1922)/count(names1922)
count(Francis1922)/count(names1922)*100
count(Francis2022)/count(names2022)*100
count(Francis2012)/count(names2012)*100
savehistory(file = "my_session_history.Rhistory")
